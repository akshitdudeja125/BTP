never liveness {    /* !(<> ((isLeader==1))) */
accept_init:
T0_init:
	do
	:: (! (((isLeader==1)))) -> goto T0_init
	od;
}
never fairness {    /* !([] (<> (((((state[0]!=1)) && ((state[1]!=1))) || (((state[0]!=1)) && ((state[2]!=1)))) || (((state[1]!=1)) && ((state[2]!=1)))))) */
T0_init:
	do
	:: (! ((((((state[0]!=1)) && ((state[1]!=1))) || (((state[0]!=1)) && ((state[2]!=1)))) || (((state[1]!=1)) && ((state[2]!=1)))))) -> goto accept_S4
	:: (1) -> goto T0_init
	od;
accept_S4:
	do
	:: (! ((((((state[0]!=1)) && ((state[1]!=1))) || (((state[0]!=1)) && ((state[2]!=1)))) || (((state[1]!=1)) && ((state[2]!=1)))))) -> goto accept_S4
	od;
}
never electionFairness {    /* !((([] (<> ((! ((state[0]==3))) || (<> ((state[0]!=3)))))) && ([] (<> ((! ((state[1]==3))) || (<> ((state[1]!=3))))))) && ([] (<> ((! ((state[2]==3))) || (<> ((state[2]!=3))))))) */
T0_init:
	do
	:: (! ((! ((state[2]==3)))) && ! (((state[2]!=3)))) -> goto accept_S4
	:: (! ((! ((state[1]==3)))) && ! (((state[1]!=3)))) -> goto accept_S25
	:: (! ((! ((state[0]==3)))) && ! (((state[0]!=3)))) -> goto accept_S46
	:: (1) -> goto T0_init
	od;
accept_S4:
	do
	:: (! ((! ((state[2]==3)))) && ! (((state[2]!=3)))) -> goto accept_S4
	od;
accept_S25:
	do
	:: (! ((! ((state[1]==3)))) && ! (((state[1]!=3)))) -> goto accept_S25
	od;
accept_S46:
	do
	:: (! ((! ((state[0]==3)))) && ! (((state[0]!=3)))) -> goto accept_S46
	od;
}
never uniqueness {    /* !([] ((leaders<=1))) */
T0_init:
	do
	:: atomic { (! (((leaders<=1)))) -> assert(!(! (((leaders<=1))))) }
	:: (1) -> goto T0_init
	od;
accept_all:
	skip
}
