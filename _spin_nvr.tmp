never electionSafety {    /* !([] (! ((((((state[0]==4)) && ((state[1]==4))) && ((currentTerm[0]==currentTerm[1]))) || ((((state[0]==4)) && ((state[2]==4))) && ((currentTerm[0]==currentTerm[2])))) || ((((state[1]==4)) && ((state[2]==4))) && ((currentTerm[1]==currentTerm[2])))))) */
T0_init:
	do
	:: atomic { (! ((! ((((((state[0]==4)) && ((state[1]==4))) && ((currentTerm[0]==currentTerm[1]))) || ((((state[0]==4)) && ((state[2]==4))) && ((currentTerm[0]==currentTerm[2])))) || ((((state[1]==4)) && ((state[2]==4))) && ((currentTerm[1]==currentTerm[2]))))))) -> assert(!(! ((! ((((((state[0]==4)) && ((state[1]==4))) && ((currentTerm[0]==currentTerm[1]))) || ((((state[0]==4)) && ((state[2]==4))) && ((currentTerm[0]==currentTerm[2])))) || ((((state[1]==4)) && ((state[2]==4))) && ((currentTerm[1]==currentTerm[2])))))))) }
	:: (1) -> goto T0_init
	od;
accept_all:
	skip
}
never crashSafety {    /* !([] ((! ((((state[0]==1)) || ((state[1]==1))) || ((state[2]==1)))) || ([] (! ((((((state[0]==4)) && ((state[1]==4))) && ((currentTerm[0]==currentTerm[1]))) || ((((state[0]==4)) && ((state[2]==4))) && ((currentTerm[0]==currentTerm[2])))) || ((((state[1]==4)) && ((state[2]==4))) && ((currentTerm[1]==currentTerm[2])))))))) */
T0_init:
	do
	:: atomic { (! ((! ((((((state[0]==4)) && ((state[1]==4))) && ((currentTerm[0]==currentTerm[1]))) || ((((state[0]==4)) && ((state[2]==4))) && ((currentTerm[0]==currentTerm[2])))) || ((((state[1]==4)) && ((state[2]==4))) && ((currentTerm[1]==currentTerm[2])))))) && ! ((! ((((state[0]==1)) || ((state[1]==1))) || ((state[2]==1)))))) -> assert(!(! ((! ((((((state[0]==4)) && ((state[1]==4))) && ((currentTerm[0]==currentTerm[1]))) || ((((state[0]==4)) && ((state[2]==4))) && ((currentTerm[0]==currentTerm[2])))) || ((((state[1]==4)) && ((state[2]==4))) && ((currentTerm[1]==currentTerm[2])))))) && ! ((! ((((state[0]==1)) || ((state[1]==1))) || ((state[2]==1))))))) }
	:: (! ((! ((((state[0]==1)) || ((state[1]==1))) || ((state[2]==1)))))) -> goto T0_S4
	:: (1) -> goto T0_init
	od;
T0_S4:
	do
	:: atomic { (! ((! ((((((state[0]==4)) && ((state[1]==4))) && ((currentTerm[0]==currentTerm[1]))) || ((((state[0]==4)) && ((state[2]==4))) && ((currentTerm[0]==currentTerm[2])))) || ((((state[1]==4)) && ((state[2]==4))) && ((currentTerm[1]==currentTerm[2]))))))) -> assert(!(! ((! ((((((state[0]==4)) && ((state[1]==4))) && ((currentTerm[0]==currentTerm[1]))) || ((((state[0]==4)) && ((state[2]==4))) && ((currentTerm[0]==currentTerm[2])))) || ((((state[1]==4)) && ((state[2]==4))) && ((currentTerm[1]==currentTerm[2])))))))) }
	:: (1) -> goto T0_S4
	od;
accept_all:
	skip
}
never eventualRecovery {    /* !([] ((((! ((state[0]==1))) || (<> ((state[0]==2)))) && ((! ((state[1]==1))) || (<> ((state[1]==2))))) && ((! ((state[2]==1))) || (<> ((state[2]==2)))))) */
T0_init:
	do
	:: (! ((! ((state[2]==1)))) && ! (((state[2]==2)))) -> goto accept_S6
	:: (! ((! ((state[1]==1)))) && ! (((state[1]==2)))) -> goto accept_S11
	:: (! ((! ((state[0]==1)))) && ! (((state[0]==2)))) -> goto accept_S16
	:: (1) -> goto T0_init
	od;
accept_S6:
	do
	:: (! (((state[2]==2)))) -> goto accept_S6
	od;
accept_S11:
	do
	:: (! (((state[1]==2)))) -> goto accept_S11
	od;
accept_S16:
	do
	:: (! (((state[0]==2)))) -> goto accept_S16
	od;
}
